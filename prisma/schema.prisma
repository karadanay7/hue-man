generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfos {
  id               Int                @id @default(autoincrement())
  userId           String             @unique
  username         String?
  bio              String?
  avatar           String?            // URL to user's avatar
  city             String?            // User's city
  state            String?            // User's state
  country          String?            // User's country
  email            String?            @unique
  socialLinks      SocialLink[]       // User's social media profiles
  interests        Interest[]         // User's interests or hobbies
  likes            Like[]             // User's likes
  posts            Post[]             // User's posts
  targets          Target[]           // User's targets
  targetProgresses TargetProgress[]   // User's progress on targets
  habits           Habit[]            // User's habits
  habitProgresses  HabitProgress[]    // User's progress on habits
  retweets         Retweet[]          // User's retweets
  diaries          Diary[]            // User's diary entries
  userCategories   UserCategory[]     // User's selected categories
}

model Interest {
  id       Int       @id @default(autoincrement())
  name     String    // Name of the interest or hobby
  userId   String    // Reference to the user, should match the `userId` in `UserInfos`
  userInfo UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model SocialLink {
  id       Int       @id @default(autoincrement())
  platform String    // Social media platform (e.g., Twitter, Facebook)
  url      String    // URL to user's profile on the platform
  userId   String    // Reference to the user
  userInfo UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Target {
  id               Int                @id @default(autoincrement())
  description      String
  goal             String
  userId           String             // Reference to the user who set the target
  userInfo         UserInfos          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  isCompleted      Boolean            @default(false) // Indicates whether the target is completed
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  targetProgresses TargetProgress[]   // User's progress on targets
  checkpoints      TargetCheckpoint[] // Checkpoints associated with the target
}

model TargetCheckpoint {
  id         Int      @id @default(autoincrement())
  targetId   Int      // Reference to the target
  target     Target   @relation(fields: [targetId], references: [id], onDelete: Cascade)    // Reference to the frequency
  frequency  String
  hours      String[]
  days       String[]
}

model Habit {
  id             Int               @id @default(autoincrement())
  description    String
  goal           String
  userId         String            // Reference to the user who has the habit
  userInfo       UserInfos         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  habitProgresses HabitProgress[]  // User's progress on habits
  checkpoints    HabitCheckpoint[] // Checkpoints associated with the habit
}

model HabitCheckpoint {
  id        Int       @id @default(autoincrement())
  habitId   Int       // Reference to the habit
  habit     Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  frequency String
  hours     String[]
  days      String[]
}

model HabitProgress {
  id        Int       @id @default(autoincrement())
  habitId   Int       // Reference to the habit
  habit     Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  userId    String    // Reference to the user who logged the habit progress
  userInfo  UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
  completed Boolean   // Indicates if the habit was completed
  amount    Float?    // Amount for habits like drinking water
  createdAt DateTime  @default(now())
}

model TargetProgress {
  id        Int       @id @default(autoincrement())
  targetId  Int       // Reference to the target
  target    Target    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  userId    String    // Reference to the user who logged the target progress
  userInfo  UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
  details   String    // Details of the progress
  createdAt DateTime  @default(now())
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  userId    String     // Reference to the user who created the post
  userInfo  UserInfos  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  username  String
  createdAt DateTime   @default(now())
  likes     Like[]     // Relation to Likes model
  retweets  Retweet[]  // Relation to Retweet model
}

model Like {
  id       Int       @id @default(autoincrement())
  userId   String    // Reference to the user who liked the post
  userInfo UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
  postId   Int       // Reference to the post that was liked
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Retweet {
  id       Int       @id @default(autoincrement())
  userId   String    // Reference to the user who retweeted the post
  userInfo UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
  postId   Int       // Reference to the post that was retweeted
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Diary {
  id        Int       @id @default(autoincrement())
  content   String
  userId    String    // Reference to the user who wrote the diary entry
  userInfo  UserInfos @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt DateTime  @default(now())
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  quotes         Quote[]          // Relation to Quote model
  userCategories UserCategory[]   // Relation to UserCategory model
}

model Quote {
  id         Int        @id @default(autoincrement())
  content    String
  categoryId Int        // Reference to the category
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model UserCategory {
  id         Int        @id @default(autoincrement())
  userId     String     // Reference to the user who selected the category
  userInfo   UserInfos  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  categoryId Int        // Reference to the selected category
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}


